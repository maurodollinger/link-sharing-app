// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users_links",
    columns: [
      { name: "json_data", type: "json" },
      { name: "user_id", type: "string", notNull: true, defaultValue: "null" },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "null" },
      { name: "last_name", type: "string" },
      { name: "email", type: "email" },
      {
        name: "profile_photo",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type UsersLinks = InferredTypes["users_links"];
export type UsersLinksRecord = UsersLinks & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users_links: UsersLinksRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://maurodollinger-s-workspace-17b8fq.us-east-1.xata.sh/db/link-sharing-app",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
